{"version":3,"file":"static/js/773.fe9025cf.chunk.js","mappings":"qPA2DA,EArDe,WAAO,IAAD,EACnB,GAAgCA,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,qBAApB,QAAqC,GACpD,GAAoCP,EAAAA,EAAAA,WAAS,kBAAMM,CAAN,IAA7C,eAAOE,EAAP,KAAmBC,EAAnB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACW,KAAfF,GAGFG,EAAAA,EAAAA,IAAA,kHAE+GH,EAF/G,gCAKGI,MAAK,SAAAC,GAAI,OAAIX,EAAYW,EAAKA,KAAKC,QAA1B,IACTC,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAA,UAAeD,EAAME,SACtB,GACN,GAAE,CAACV,KAGF,iCACE,kBACEW,SAAU,SAAAC,GACRA,EAAEC,iBACFZ,EAAcH,EAEf,EALH,WAOE,kBAAOgB,QAAQ,SAAf,UACE,kBACEC,KAAK,OACLC,KAAK,SACLC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,MAAOtB,EACPuB,SAAU,SAAAT,GACRf,EAAgB,CAAEG,WAAYY,EAAEU,OAAOF,OACxC,OAIL,mBAAQL,KAAK,SAAb,uBAGDtB,EAAS8B,OAAS,IAAK,SAACC,EAAA,EAAD,CAAO/B,SAAUA,KAEzC,SAAC,KAAD,CAAgBgC,UAAW,QAGhC,C,oFC7BD,EA1Bc,SAAC,GAAkB,IAAhBhC,EAAe,EAAfA,SACTiC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGlC,EAASmC,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIX,EAAY,EAAZA,MACnB,OACE,yBACE,SAAC,KAAD,CAAMY,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMN,GAA1C,SACGR,KAFIW,EAMZ,KAGN,C","sources":["Page/Movies/Movies.jsx","components/Films/Films.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useSearchParams } from 'react-router-dom';\nimport Films from 'components/Films';\n\nconst Movies = () => {\n  const [arrFilms, setArrFilms] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams('');\n  const movieName = searchParams.get('queryMovie') ?? '';\n  const [queryMovie, setQueryMovie] = useState(() => movieName);\n\n  useEffect(() => {\n    if (queryMovie === '') {\n      return;\n    } else\n      axios\n        .get(\n          `https://api.themoviedb.org/3/search/movie?api_key=8d99b39cb91a8ab8040b3ee85cb6e931&language=en-US&query=${queryMovie}&page=1&include_adult=false`\n        )\n\n        .then(data => setArrFilms(data.data.results))\n        .catch(error => {\n          toast.error(`${error.message}`);\n        });\n  }, [queryMovie]);\n\n  return (\n    <>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          setQueryMovie(movieName);\n\n        }}\n      >\n        <label htmlFor=\"search\">\n          <input\n            type=\"text\"\n            name=\"search\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={movieName}\n            onChange={e => {\n              setSearchParams({ queryMovie: e.target.value });\n            }}\n          />\n        </label>\n\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {arrFilms.length > 0 && <Films arrFilms={arrFilms} />}\n\n      <ToastContainer autoClose={2000} />\n    </>\n  );\n};\nexport default Movies;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Films = ({ arrFilms }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {arrFilms.map(({ id, title }) => {\n        return (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nFilms.propTypes = {\n  arrFilms: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default Films;\n"],"names":["useState","arrFilms","setArrFilms","useSearchParams","searchParams","setSearchParams","movieName","get","queryMovie","setQueryMovie","useEffect","axios","then","data","results","catch","error","toast","message","onSubmit","e","preventDefault","htmlFor","type","name","pattern","title","required","value","onChange","target","length","Films","autoClose","location","useLocation","map","id","to","state","from"],"sourceRoot":""}