{"version":3,"file":"static/js/267.4d3b36ae.chunk.js","mappings":"qRAEaA,EAAWC,EAAAA,EAAAA,IAAH,oPAgBRC,EAAUD,EAAAA,EAAAA,OAAH,8hB,SC2CpB,EArDe,WAAO,IAAD,EACnB,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,qBAApB,QAAqC,GACpD,GAAoCP,EAAAA,EAAAA,WAAS,kBAAMM,CAAN,IAA7C,eAAOE,EAAP,KAAmBC,EAAnB,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACW,KAAfF,GAGFG,EAAAA,EAAAA,IAAA,kHAE+GH,EAF/G,gCAKGI,MAAK,SAAAC,GAC6B,IAA7BA,EAAKA,KAAKC,QAAQC,OACpBC,EAAAA,GAAAA,QAAc,oCACTd,EAAYW,EAAKA,KAAKC,QAC9B,IACAG,OAAM,SAAAC,GACLF,EAAAA,GAAAA,MAAA,UAAeE,EAAMC,SACtB,GACN,GAAE,CAACX,KAGF,UAACX,EAAD,YACE,kBACEuB,SAAU,SAAAC,GACRA,EAAEC,iBACFb,EAAcH,EACf,EAJH,WAME,kBAAOiB,QAAQ,SAAf,UACE,kBACEC,KAAK,OACLC,KAAK,SACLC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,MAAOvB,EACPwB,SAAU,SAAAT,GACRhB,EAAgB,CAAEG,WAAYa,EAAEU,OAAOF,OACxC,OAGL,SAAC9B,EAAD,CAASyB,KAAK,SAAd,uBAEDvB,EAASc,OAAS,IAAK,SAACiB,EAAA,EAAD,CAAO/B,SAAUA,KACzC,SAAC,KAAD,CAAgBgC,UAAW,QAGhC,C,kHC1DYC,EAAMpC,EAAAA,EAAAA,GAAH,4HAQHqC,EAAOrC,EAAAA,EAAAA,GAAH,+D,kBCJXsC,GAAatC,EAAAA,EAAAA,IAAOuC,EAAAA,GAAPvC,CAAH,uUAwDhB,EAnCc,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SACTqC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACL,EAAD,iBACGjC,QADH,IACGA,OADH,EACGA,EAAUuC,KAAI,YAAmC,IAAhCC,EAA+B,EAA/BA,GAAId,EAA2B,EAA3BA,MAAOe,EAAoB,EAApBA,cAC3B,OACE,SAACP,EAAD,WACE,UAACC,EAAD,CAAYO,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAAhD,WACE,gBACEQ,IACEJ,EAAa,0CAC0BA,GACnCK,EAENC,IAAKrB,EACLsB,MAAO,KAERtB,MAXMc,EAed,KAGN,C","sources":["Page/Movies/Movies.styled.js","Page/Movies/Movies.jsx","components/Films/Films.styled.js","components/Films/Films.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const BoxMovie = styled.div`\n  width: 100%;\n  padding: 20px 0;\n  font-size: 20px;\n  form {\n    display: flex;\n  }\n\n  input {\n    width: 400px;\n    height: 20px;\n    border: solid 1px #081c4b;\n    padding: 5px;\n    font-size: 16px;\n  }\n`;\nexport const BtnForm = styled.button`\n  border: none;\n  width: 140px;\n  height: 32px;\n  padding: 0 5px;\n  cursor: pointer;\n  font-family: 'Roboto Slab', sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.88;\n  letter-spacing: 0.06em;\n  border-top-right-radius: 5px;\n  border-bottom-right-radius: 5px;\n  color: #ffffff;\n  background-color: #081c4b;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: #044813;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useSearchParams } from 'react-router-dom';\nimport Films from 'components/Films';\nimport { BoxMovie, BtnForm } from './Movies.styled';\n\nconst Movies = () => {\n  const [arrFilms, setArrFilms] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams('');\n  const movieName = searchParams.get('queryMovie') ?? '';\n  const [queryMovie, setQueryMovie] = useState(() => movieName);\n\n  useEffect(() => {\n    if (queryMovie === '') {\n      return;\n    } else\n      axios\n        .get(\n          `https://api.themoviedb.org/3/search/movie?api_key=8d99b39cb91a8ab8040b3ee85cb6e931&language=en-US&query=${queryMovie}&page=1&include_adult=false`\n        )\n\n        .then(data => {\n          if (data.data.results.length === 0) {\n            toast.warning('No movies found for your search!');\n          } else setArrFilms(data.data.results);\n        })\n        .catch(error => {\n          toast.error(`${error.message}`);\n        });\n  }, [queryMovie]);\n\n  return (\n    <BoxMovie>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          setQueryMovie(movieName);\n        }}\n      >\n        <label htmlFor=\"search\">\n          <input\n            type=\"text\"\n            name=\"search\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={movieName}\n            onChange={e => {\n              setSearchParams({ queryMovie: e.target.value });\n            }}\n          />\n        </label>\n        <BtnForm type=\"submit\">Search</BtnForm>\n      </form>\n      {arrFilms.length > 0 && <Films arrFilms={arrFilms} />}\n      <ToastContainer autoClose={3000} />\n    </BoxMovie>\n  );\n};\nexport default Movies;\n","import styled from '@emotion/styled';\n\nexport const Box = styled.ul`\n  width: 100%;\n\n  margin: 10px auto;\n  padding: 0 5px;\n  list-style: none;\n  font-size: 20px;\n`;\nexport const List = styled.li`\n  width: 100%;\n  margin-bottom: 5px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Box, List } from './Films.styled';\nimport defalteImg from '../../Uttils/img/defalteImg.jpg';\n\nconst StyledLink = styled(Link)`\n  color: #000000;\n  text-decoration: none;\n  margin-right: 10px;\n  font-weight: 500;\n  font-size: 25px;\n  display: flex;\n  align-items: center;\n  img {\n    margin-right: 20px;\n    display: block;\n    :hover {\n      transform: scale(1.5);\n    }\n  }\n\n  &:hover {\n    color: #7f1f58;\n  }\n`;\n\nconst Films = ({ arrFilms }) => {\n  const location = useLocation();\n\n  return (\n    <Box>\n      {arrFilms?.map(({ id, title, backdrop_path }) => {\n        return (\n          <List key={id}>\n            <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n              <img\n                src={\n                  backdrop_path\n                    ? `https://image.tmdb.org/t/p/w500/${backdrop_path}`\n                    : defalteImg\n                }\n                alt={title}\n                width={80}\n              />\n              {title}\n            </StyledLink>\n          </List>\n        );\n      })}\n    </Box>\n  );\n};\nFilms.propTypes = {\n  arrFilms: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default Films;\n"],"names":["BoxMovie","styled","BtnForm","useState","arrFilms","setArrFilms","useSearchParams","searchParams","setSearchParams","movieName","get","queryMovie","setQueryMovie","useEffect","axios","then","data","results","length","toast","catch","error","message","onSubmit","e","preventDefault","htmlFor","type","name","pattern","title","required","value","onChange","target","Films","autoClose","Box","List","StyledLink","Link","location","useLocation","map","id","backdrop_path","to","state","from","src","defalteImg","alt","width"],"sourceRoot":""}