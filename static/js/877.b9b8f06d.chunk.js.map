{"version":3,"file":"static/js/877.b9b8f06d.chunk.js","mappings":"sPA6DA,EAtDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,IAAA,6CAE0CN,EAF1C,qEAKGO,MAAK,SAAAC,GAAI,OAAIJ,EAASI,EAAKA,KAAKC,KAAvB,IACTC,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAA,UAAeD,EAAME,SACtB,GACJ,GAAE,CAACb,KAGF,iCACE,wBACGG,EAAMW,KAAI,SAAAL,GACT,IAAQM,EAAsDN,EAAtDM,UAAWC,EAA2CP,EAA3CO,aAAcC,EAA6BR,EAA7BQ,cAAeC,EAAcT,EAAdS,UAEhD,OACE,2BACE,gBACEC,IACEH,EAAY,0CAC2BA,GACnCI,EAENC,IAAKJ,EACLK,MAAO,OAET,uBAAIL,KACJ,uBAAIC,MAXGH,EAcZ,OAEH,SAAC,KAAD,CAAgBQ,UAAW,QAGhC,C","sources":["components/Cast/Cast.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport  defalteImg from '../../Uttils/img/defalteImg.jpg';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [casts, setCasts] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=8d99b39cb91a8ab8040b3ee85cb6e931&language=en-US`\n      )\n\n      .then(data => setCasts(data.data.cast))\n      .catch(error => {\n        toast.error(`${error.message}`);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {casts.map(cast => {\n          const { credit_id, profile_path, original_name, character } = cast;\n\n          return (\n            <li key={credit_id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : defalteImg\n                }\n                alt={original_name}\n                width={100}\n              />\n              <p>{original_name}</p>\n              <p>{character}</p>\n            </li>\n          );\n        })}\n      </ul>\n      <ToastContainer autoClose={2000} />\n    </>\n  );\n};\nCast.propTypes = {\n  casts: PropTypes.arrayOf(\n    PropTypes.shape({\n      credit_id: PropTypes.string,\n      profile_path: PropTypes.string,\n      original_name: PropTypes.string,\n      character:PropTypes.string\n    })\n  )\n};\nexport default Cast;\n"],"names":["movieId","useParams","useState","casts","setCasts","useEffect","axios","then","data","cast","catch","error","toast","message","map","credit_id","profile_path","original_name","character","src","defalteImg","alt","width","autoClose"],"sourceRoot":""}